def inspectException = { body ->
    try {
        body()
    } catch(err) {
        echo "Exception: ${err}"
        causeClasses = err.causes.collect {it.getClass()}
        echo "Exception causes: ${causeClasses}"
        throw err
    }
}

def retryOnOffline = { body ->
    while(true) {
        try {
            inspectException {
                body()
            }
            break
        } catch(err) {
            if (err instanceof org.jenkinsci.plugins.workflow.steps.FlowInterruptedException &&
                err.causes.collect {it.getClass()}.contains(org.jenkinsci.plugins.workflow.support.steps.ExecutorStepExecution.RemovedNodeCause)) {
                continue
            } else {
                throw err
            }
        }
    }
}


def mavenCheck = { stageName, body ->
    stage(stageName) {
        retryOnOffline {
            node('jenkinsSpot') {
                checkout scm
                unstash 'm2'
                unstash 'core-druid'
                unstash 'processing'
                withCredentials([file(credentialsId: 'maven-artifactory-settings', variable: 'MVN_SETTINGS_PATH')]) {
                    docker.image('maven:3.6.3-jdk-8').inside(
                        "--memory=8g --memory-reservation=4g -v ${env.MVN_SETTINGS_PATH}:/tmp/.m2/settings.xml -e HOME=/tmp") {
                        body()
                    }
                }
            }
        }
    }
}


def MVN              = "mvn -B -Dmaven.repo.local=.m2/repository"
def MVN_OPTS         = "export MAVEN_OPTS=\"-Xms4g -Xmx8g -XX:MaxDirectMemorySize=2048m\""
def MAVEN_SKIP       = "-Danimal.sniffer.skip=true -Dcheckstyle.skip=true -Ddruid.console.skip=true -Denforcer.skip=true -Dforbiddenapis.skip=true -Dmaven.javadoc.skip=true -Dpmd.skip=true -Dspotbugs.skip=true"
def MAVEN_SKIP_TESTS = "-DskipTests -Djacoco.skip=true"

def DOCKERFILE_TEMPLATE = """\
ARG JDK
FROM maven:3.6.3-\${JDK}
RUN apt-get update -y && apt-get install python3 python3-pip python3-setuptools -y
RUN pip3 install wheel pyyaml
"""

stage("Maven install") {
    retryOnOffline {
        node('jenkinsSpot') {
            withCredentials([file(credentialsId: 'maven-artifactory-settings', variable: 'MVN_SETTINGS_PATH')]) {
                docker.image('maven:3.6.3-jdk-8').inside(
                    "--memory=8g --memory-reservation=4g -v ${env.MVN_SETTINGS_PATH}:/tmp/.m2/settings.xml -e HOME=/tmp") {
                    checkout scm
                    sh script: "${MVN_OPTS} && ${MVN} clean install -q -ff ${MAVEN_SKIP} ${MAVEN_SKIP_TESTS} -T 1C", label: "Maven install"
                    stash allowEmpty: true, includes: '.m2/**', name: 'm2'
                    stash allowEmpty: true, includes: 'core/**', name: 'core-druid'
                    stash allowEmpty: true, includes: 'processing/**', name: 'processing-druid'
                }
            }
        }
    }
}

stage("Checks") {
    parallel "animal sniffer checks": {
        mavenCheck("animal sniffer checks") {
            sh script: "${MVN} animal-sniffer:check --fail-at-end", label: "animal sniffer"
        }
    },
    "checkstyle": {
        mavenCheck("checkstyle") {
            sh script: "${MVN} checkstyle:checkstyle --fail-at-end",label: "checkstyle"
        }
    },
    "enforcer checks": {
        mavenCheck("enforcer checks") {
            sh script: "${MVN} enforcer:enforce --fail-at-end", label: "enforcer checks"
        }
    },
    "forbidden api checks": {
        mavenCheck("forbidden api checks") {
            sh script: "${MVN} forbiddenapis:check forbiddenapis:testCheck --fail-at-end", label: "forbidden api checks"
        }
    },
    "pmd checks": {
        mavenCheck("pmd checks") {
            sh script: "${MVN} pmd:check --fail-at-end", label: "pmd checks"
        }
    },
    "spotbugs checks": {
        mavenCheck("spotbugs checks") {
            sh script: "${MVN} spotbugs:check --fail-at-end -pl '!benchmarks' -T 1C", label: "spotbugs checks"
        }
    },
    "license checks": {
        retryOnOffline {
            node('jenkinsSpot') {
                withCredentials([file(credentialsId: 'maven-artifactory-settings', variable: 'MVN_SETTINGS_PATH')]) {
                    writeFile file: "@tmp/Dockerfile", text: DOCKERFILE_TEMPLATE
                    docker.build(
                        "maven:3.6.3-jdk-8-${env.BUILD_ID}",
                        "--build-arg JDK=jdk-8 @tmp").inside(
                        "--memory=8g --memory-reservation=4g -v ${env.MVN_SETTINGS_PATH}:/tmp/.m2/settings.xml -e HOME=/tmp") {
                        checkout scm
                        unstash 'm2'
                        unstash 'core-druid'
                        unstash 'processing'
                        sh script: """
                            ${MVN_OPTS}
                            mkdir -p /tmp/bin
                            /bin/echo -e "#!/bin/bash\\nPATH=/usr/bin:\\\$PATH exec ${MVN} \\\$@" | tee -a /tmp/bin/mvn
                            chmod u+x /tmp/bin/mvn

                            export PATH=/tmp/bin:\$PATH
                            mvn apache-rat:check -Prat --fail-at-end \
                                -Dorg.slf4j.simpleLogger.log.org.apache.maven.cli.transfer.Slf4jMavenTransferListener=warn \
                                -Drat.consoleOutput=true -Drat.numUnapprovedLicenses=100
                            mkdir -p target
                            distribution/bin/generate-license-dependency-reports.py . target --clean-maven-artifact-transfer --parallel 2
                            distribution/bin/check-licenses.py licenses.yaml target/license-reports
                        """, label: "license checks"
                    }
                }
            }
        }
    }
}





// stage("Install and checks") {
//     // retryOnOffline {
//         node('jenkinsSpot') {
//             withCredentials([file(credentialsId: 'maven-artifactory-settings', variable: 'MVN_SETTINGS_PATH')]) {
//                 writeFile file: "@tmp/Dockerfile", text: DOCKERFILE_TEMPLATE
//                 docker.build(
//                     "maven:3.6.3-jdk-8-${env.BUILD_ID}",
//                     "--build-arg JDK=jdk-8 @tmp").inside(
//                     "--memory=8g --memory-reservation=4g -v ${env.MVN_SETTINGS_PATH}:/tmp/.m2/settings.xml -e HOME=/tmp") {
//                     stage('Checkout') {
//                         checkout scm
//                     }

//                     stage('Install') {
//                         sh script: "${MVN_OPTS} && ${MVN} clean install -q -ff ${MAVEN_SKIP} ${MAVEN_SKIP_TESTS} -T 1C", label: "Maven install"
//                         stash allowEmpty: true, includes: '.m2/**', name: 'm2'
//                         stash allowEmpty: true, includes: 'core/**', name: 'core-druid'
//                         stash allowEmpty: true, includes: 'processing/**', name: 'processing-druid'
//                     }

//                     stage('Checks') {
//                         parallel "animal sniffer checks": {
//                             sh script: "${MVN} animal-sniffer:check --fail-at-end", label: "animal sniffer"
//                         },
//                         "checkstyle": {
//                             sh script: "${MVN} checkstyle:checkstyle --fail-at-end",label: "checkstyle"
//                         },
//                         "enforcer checks": {
//                             sh script: "${MVN} enforcer:enforce --fail-at-end", label: "enforcer checks"
//                         },
//                         "forbidden api checks": {
//                             sh script: "${MVN} forbiddenapis:check forbiddenapis:testCheck --fail-at-end", label: "forbidden api checks"
//                         },
//                         "pmd checks": {
//                             sh script: "${MVN} pmd:check --fail-at-end", label: "pmd checks"
//                         },
//                         "spotbugs checks": {
//                             sh script: "${MVN} spotbugs:check --fail-at-end -pl '!benchmarks' -T 1C", label: "spotbugs checks"
//                         },
//                         "license checks": {
//                             sh script: """
//                                 ${MVN_OPTS}
//                                 mkdir -p /tmp/bin
//                                 /bin/echo -e "#!/bin/bash\\nPATH=/usr/bin:\\\$PATH exec ${MVN} \\\$@" | tee -a /tmp/bin/mvn
//                                 chmod u+x /tmp/bin/mvn

//                                 export PATH=/tmp/bin:\$PATH
//                                 mvn apache-rat:check -Prat --fail-at-end \
//                                     -Dorg.slf4j.simpleLogger.log.org.apache.maven.cli.transfer.Slf4jMavenTransferListener=warn \
//                                     -Drat.consoleOutput=true -Drat.numUnapprovedLicenses=100
//                                 mkdir -p target
//                                 distribution/bin/generate-license-dependency-reports.py . target --clean-maven-artifact-transfer --parallel 2
//                                 distribution/bin/check-licenses.py licenses.yaml target/license-reports
//                             """, label: "license checks"
//                         }
//                     }
//                 }
//             }
//         }
//     // }
// }

// stage('Tests') {
//         parallel 'Long job test': {
//             node('jenkinsSpot') {
//                 docker.image('maven:3.6.3-jdk-8').inside("--memory=8g --memory-reservation=4g -u root:root") {
//                     sh script: "sleep 600"
//                 }
//             }
//         },
//         'Yet another parallel test': {
//             node('jenkinsSpot') {
//                 docker.image('maven:3.6.3-jdk-8').inside("--memory=8g --memory-reservation=4g -u root:root") {
//                     sh script: "sleep 540"
//                 }
//             }
//         }
// }

// pipeline {
//     agent none
//     // agent {
//     //     kubernetes {
//     //         yamlFile 'jenkins-pod.yaml'
//     //     }
//     // }

//     options {
//         timeout(time: 1, unit: 'HOURS')
//     }

//     //Set global env
//     environment {
//         MVN              = "mvn -B -Dmaven.repo.local=.m2/repository"
//         MVN_OPTS         = "export MAVEN_OPTS=\"-Xms4g -Xmx8g -XX:MaxDirectMemorySize=2048m\""
//         // Various options to make execution of maven goals faster (e.g., mvn install)
//         MAVEN_SKIP       = "-Danimal.sniffer.skip=true -Dcheckstyle.skip=true -Ddruid.console.skip=true -Denforcer.skip=true -Dforbiddenapis.skip=true -Dmaven.javadoc.skip=true -Dpmd.skip=true -Dspotbugs.skip=true"
//         MAVEN_SKIP_TESTS = "-DskipTests -Djacoco.skip=true"
//     }

//     // stages {
//     //     stage('Basic test') {
//     //         agent { kubernetes { yamlFile 'jenkins-jdk8-pod.yaml'; defaultContainer 'jdk' } }
//     //         stages{
//     //             stage('Git checkout'){
//     //                 steps {
//     //                     sh script: 'echo $HOME'
//     //                     sh script: 'echo testtesttest > output.txt'
//     //                     sh script: 'exit 1'
//     //                     stash allowEmpty: true, includes: 'output.txt', name: 'test'
//     //                 }
//     //             }
//     //         }

//     //         // steps {
//     //         //     container('shell') {
//     //         //         sh 'sleep 120'
//     //         //         sh 'hostname'
//     //         //         sh 'sleep 120'
//     //         //     }
//     //         // }
//     //     }
//     // }

//     // stages {
//     //     stage('Basic test'){
//             // agent { kubernetes { yamlFile 'jenkins-jdk8-pod.yaml'; defaultContainer 'jdk' } }
//             // agent { docker { image 'maven:3.6.3-jdk-8'; args '--memory=8g --memory-reservation=4g'; label 'jenkinsSpot' } }
//     stages{
//         stage('Install and checks'){
//             agent { docker { image 'maven:3.6.3-jdk-8'; args '--memory=8g --memory-reservation=4g -u root:root'; label 'jenkinsSpot' } }
//             stages {
//                 spotStage('Install') {
//                     parallel {
//                         stage('Maven install') {
//                             steps {
//                                 sh script: "${env.MVN_OPTS} && ${env.MVN} clean install -q -ff ${env.MAVEN_SKIP} ${env.MAVEN_SKIP_TESTS} -T 1C", label: "Maven install"
//                                 stash allowEmpty: true, includes: '.m2/**', name: 'm2'
//                                 stash allowEmpty: true, includes: 'core/**', name: 'core-druid'
//                                 stash allowEmpty: true, includes: 'processing/**', name: 'processing-druid'
//                             }
//                         }
//                         stage('Python install') {
//                             steps {
//                                 sh script: """
//                                     apt-get update -y && apt-get install python3 python3-pip python3-setuptools -y
//                                     pip3 install wheel pyyaml
//                                 """, label: "Python install"
//                             }
//                         }
//                     }
//                 }
//                 spotStage('Checks'){
//                     parallel {
//                         stage ('animal sniffer checks'){
//                             steps {
//                                 sh script: "${env.MVN} animal-sniffer:check --fail-at-end", label: "animal sniffer"
//                             }
//                         }
//                         stage ('checkstyle'){
//                             steps {
//                                 sh script: "${env.MVN} checkstyle:checkstyle --fail-at-end",label: "checkstyle"
//                             }
//                         }
//                         stage ('enforcer checks'){
//                             steps {
//                                 sh script: "${env.MVN} enforcer:enforce --fail-at-end", label: "enforcer checks"
//                             }
//                         }
//                         stage ('forbidden api checks'){
//                             steps {
//                                 sh script: "${env.MVN} forbiddenapis:check forbiddenapis:testCheck --fail-at-end", label: "forbidden api checks"
//                             }
//                         }
//                         stage ('pmd checks'){
//                             steps {
//                                 sh script: "${env.MVN} pmd:check --fail-at-end", label: "pmd checks"
//                             }
//                         }
//                         stage ('spotbugs checks'){
//                             steps {
//                                 sh script: "${env.MVN} spotbugs:check --fail-at-end -pl '!benchmarks' -T 1C", label: "spotbugs checks"
//                             }
//                         }
//                         stage ('license checks'){
//                             steps {
//                                 sh script: """
//                                     ${env.MVN_OPTS}
//                                     mkdir -p /tmp/bin
//                                     /bin/echo -e "#!/bin/bash\\nPATH=/usr/bin:\\\$PATH exec ${env.MVN} \\\$@" | tee -a /tmp/bin/mvn
//                                     chmod u+x /tmp/bin/mvn

//                                     export PATH=/tmp/bin:\$PATH
//                                     mvn apache-rat:check -Prat --fail-at-end \
//                                         -Dorg.slf4j.simpleLogger.log.org.apache.maven.cli.transfer.Slf4jMavenTransferListener=warn \
//                                         -Drat.consoleOutput=true -Drat.numUnapprovedLicenses=100
//                                     mkdir -p target
//                                     distribution/bin/generate-license-dependency-reports.py . target --clean-maven-artifact-transfer --parallel 2
//                                     distribution/bin/check-licenses.py licenses.yaml target/license-reports
//                                 """, label: "license checks"
//                             }
//                         }
//                     }
//                 }
//             }
//         }

//         spotStage('Tests') {
//             parallel{
//                 stage('Long job test') {
//                     agent { docker { image 'maven:3.6.3-jdk-8'; args '--memory=8g --memory-reservation=4g'; label 'jenkinsSpot' } }
//                     steps { script { inspectException {
//                         sh script: "sleep 1800"
//                     } } }
//                 }
//             }
//         }
//     }
//         // }
//         // stage('Deep tests'){
//         //     parallel{
//         //         stage('Deep tests 1'){
//         //             agent {
//         //                 kubernetes {
//         //                     yamlFile 'jenkins-pod.yaml'
//         //                 }
//         //             }
//         //             tools {
//         //                 maven 'apache-maven'
//         //             }
//         //             stages{
//         //                 stage('Git checkout') {
//         //                     steps{
//         //                         checkout scm
//         //                     }
//         //                 }

//         //                 stage('Install'){
//         //                     steps{
//         //                         container('jnlp'){
//         //                             unstash 'm2'
//         //                             unstash 'core-druid'
//         //                             unstash 'processing-druid'
//         //                             //sh script: "export ${env.MVN_OPTS} && ${env.MVN} clean install -q -ff ${env.MAVEN_SKIP} ${env.MAVEN_SKIP_TESTS} -T1C", label: "Maven install"
//         //                             sh script: """
//         //                                 mkdir -p /var/cache/apt/archives/partial/
//         //                                 apt-get update && apt-get install python3 python3-pip python3-setuptools -y
//         //                                 pip3 install wheel
//         //                                 pip3 install pyyaml
//         //                             """, label: "Install prerequsite"
//         //                         }
//         //                     }
//         //                 }
//         //                 stage ('license checks'){
//         //                     steps {
//         //                         container('jnlp'){
//         //                             sh script: """
//         //                             export ${env.MVN_OPTS}
//         //                             ${env.MVN} apache-rat:check -Prat --fail-at-end -Dorg.slf4j.simpleLogger.log.org.apache.maven.cli.transfer.Slf4jMavenTransferListener=warn -Drat.consoleOutput=true -Drat.numUnapprovedLicenses=100
//         //                             mkdir -p target
//         //                             distribution/bin/generate-license-dependency-reports.py . target --clean-maven-artifact-transfer --parallel 2
//         //                             distribution/bin/check-licenses.py licenses.yaml target/license-reports
//         //                             """, label: "license checks"
//         //                         }
//         //                     }
//         //                 }
//         //                 stage ('compile_strict_jdk8'){
//         //                     steps {
//         //                         container('jnlp'){
//         //                             sh script: "export ${env.MVN_OPTS} && ${env.MVN} clean -Pstrict compile test-compile --fail-at-end -pl '!benchmarks' ${MAVEN_SKIP} ${MAVEN_SKIP_TESTS}",label: "compile_strict"
//         //                         }
//         //                     }
//         //                 }
//         //             }
//         //         }

//         //         stage('Deep Tests 2') {
//         //             agent {
//         //                 kubernetes {
//         //                     yamlFile 'jenkins-pod.yaml'
//         //                 }
//         //             }
//         //             tools {
//         //                 maven 'apache-maven'
//         //             }
//         //             stages{
//         //                 stage('Git checkout') {
//         //                     steps{
//         //                         checkout scm
//         //                     }
//         //                 }

//         //                 stage('Install'){
//         //                     steps{
//         //                         container('jnlp'){
//         //                             unstash 'm2'
//         //                             unstash 'core-druid'
//         //                             unstash 'processing-druid'
//         //                             //sh script: "export ${env.MVN_OPTS} && ${env.MVN} clean install -q -ff ${env.MAVEN_SKIP} ${env.MAVEN_SKIP_TESTS} -T1C", label: "Maven install"
//         //                             sh script: """
//         //                                 mkdir -p /var/cache/apt/archives/partial/
//         //                                 apt-get update && apt-get install python3 python3-pip python3-setuptools -y
//         //                                 pip3 install wheel
//         //                                 pip3 install pyyaml
//         //                             """, label: "Install prerequsite"
//         //                         }
//         //                     }
//         //                 }
//         //                 stage ('analyze dependencies'){
//         //                     steps {
//         //                         container('jnlp'){
//         //                             sh script: "export ${env.MVN_OPTS} && ${MVN} ${MAVEN_SKIP} dependency:analyze -DoutputXML=true -DignoreNonCompile=true -DfailOnWarning=true", label: "analyze dependencies"
//         //                         }
//         //                     }
//         //                     post {
//         //                         failure{
//         //                             echo """
//         //                             FAILURE EXPLANATION:
//         //                                 The dependency analysis has found a dependency that is either:
//         //                                 1) Used and undeclared: These are available as a transitive dependency but should be explicitly
//         //                                 added to the POM to ensure the dependency version. The XML to add the dependencies to the POM is
//         //                                 shown above.
//         //                                 2) Unused and declared: These are not needed and removing them from the POM will speed up the build
//         //                                 and reduce the artifact size. The dependencies to remove are shown above.
//         //                                 If there are false positive dependency analysis warnings, they can be suppressed:
//         //                                 https://maven.apache.org/plugins/maven-dependency-plugin/analyze-mojo.html#usedDependencies
//         //                                 https://maven.apache.org/plugins/maven-dependency-plugin/examples/exclude-dependencies-from-dependency-analysis.html
//         //                                 For more information, refer to:
//         //                                 https://maven.apache.org/plugins/maven-dependency-plugin/analyze-mojo.html
//         //                             """
//         //                         }
//         //                     }
//         //                 }
//         //                 stage ('test_processing_module_jdk8'){
//         //                     steps {
//         //                         container('jnlp'){
//         //                             sh script: """
//         //                             unset _JAVA_OPTIONS
//         //                             export ${env.MVN_OPTS}
//         //                             ${env.MVN} test -pl processing ${MAVEN_SKIP} -Dremoteresources.skip=true
//         //                             """, label: "test_processing_module"
//         //                         }
//         //                     }
//         //                     post {
//         //                         success {
//         //                             sh script: "${MVN} -pl processing jacoco:report", label: "create jacoco report"
//         //                         }
//         //                     }
//         //                 }
//         //             }
//         //         }

//         //         stage('Deep Tests 3') {
//         //             agent {
//         //                 kubernetes {
//         //                     yamlFile 'jenkins-pod.yaml'
//         //                 }
//         //             }
//         //             tools {
//         //                 maven 'apache-maven'
//         //             }
//         //             stages{
//         //                 stage('Git checkout') {
//         //                     steps{
//         //                         checkout scm
//         //                     }
//         //                 }

//         //                 stage('Install'){
//         //                     steps{
//         //                         container('jnlp'){
//         //                             unstash 'm2'
//         //                             unstash 'core-druid'
//         //                             unstash 'processing-druid'
//         //                             //sh script: "export ${env.MVN_OPTS} && ${env.MVN} clean install -q -ff ${env.MAVEN_SKIP} ${env.MAVEN_SKIP_TESTS} -T1C", label: "Maven install"
//         //                             sh script: """
//         //                                 mkdir -p /var/cache/apt/archives/partial/
//         //                                 apt-get update && apt-get install python3 python3-pip python3-setuptools -y
//         //                                 pip3 install wheel
//         //                                 pip3 install pyyaml
//         //                             """, label: "Install prerequsite"
//         //                         }
//         //                     }
//         //                 }
//         //                 stage ('package_check_jdk8'){
//         //                     steps {
//         //                         container('jnlp'){
//         //                             sh script: """
//         //                             export ${env.MVN_OPTS}
//         //                             ${env.MVN} clean install -Pdist -Pbundle-contrib-exts --fail-at-end -pl '!benchmarks' ${MAVEN_SKIP} ${MAVEN_SKIP_TESTS} -Ddruid.console.skip=false -T1C
//         //                             """, label: "package check"
//         //                         }
//         //                     }
//         //                 }
//         //                 stage ('security vulnerabilities'){
//         //                     steps {
//         //                         container('jnlp'){
//         //                             sh script: "export ${env.MVN_OPTS} && ${env.MVN} dependency-check:check --fail-at-end", label: "security vulnerabilities"
//         //                         }
//         //                     }
//         //                     post {
//         //                         failure{
//         //                             echo """
//         //                             FAILURE EXPLANATION:
//         //                                 The OWASP dependency check has found security vulnerabilities. Please use a newer version
//         //                                 of the dependency that does not have vulenerabilities. If the analysis has false positives,
//         //                                 they can be suppressed by adding entries to owasp-dependency-check-suppressions.xml (for more
//         //                                 information, see https://jeremylong.github.io/DependencyCheck/general/suppression.html).
//         //                             """
//         //                         }
//         //                     }
//         //                 }
//         //             }
//         //         }
//         //     }
//         // }
//     // }
//     //Send slack notification
//     // post {
//     //     regression { slackSend color: 'danger', message: "Job ${env.JOB_NAME} build ${env.BUILD_NUMBER} failed. See logs ${BUILD_URL}console" }
//     // }
// }
