def MVN              = "mvn -B -Dmaven.repo.local=.m2/repository"
def MVN_OPTS         = "export MAVEN_OPTS=\"-Xms4g -Xmx8g -XX:MaxDirectMemorySize=2048m\""
def MAVEN_SKIP       = "-Danimal.sniffer.skip=true -Dcheckstyle.skip=true -Ddruid.console.skip=true -Denforcer.skip=true -Dforbiddenapis.skip=true -Dmaven.javadoc.skip=true -Dpmd.skip=true -Dspotbugs.skip=true"
def MAVEN_SKIP_TESTS = "-DskipTests -Djacoco.skip=true"

def mavenStash = {
    stash allowEmpty: true, includes: '.m2/**', name: 'm2'
    stash allowEmpty: true, includes: 'core/**', name: 'core-druid'
    stash allowEmpty: true, includes: 'processing/**', name: 'processing-druid'
}

def mavenUnstash = {
    unstash 'm2'
    unstash 'core-druid'
    unstash 'processing-druid'
}

def dockerInitCleanup = {
    sh script: "for container in \$(docker ps -q); do docker stop \$container; done"
    sh script: "docker container prune -f"
    sh script: "docker volume prune -f"
    sh script: "docker network prune -f"
}

def withArtifactorySettings = { body ->
    withCredentials([file(credentialsId: 'maven-artifactory-settings', variable: 'MVN_SETTINGS_PATH')]) {
        body(env.MVN_SETTINGS_PATH)
    }
}

def heavyNode = { body ->
    node('jenkinsOnDemand') {
        body()
    }
}

def lightweightNode = { body ->
    node('jenkinsOnDemandMultiExec') {
        body()
    }
}

def withGitCredentials = { body ->
    withCredentials([
        usernamePassword(
            credentialsId: scm.getUserRemoteConfigs()[0].getCredentialsId(),
            passwordVariable: 'GIT_PASSWORD',
            usernameVariable: 'GIT_USERNAME')
        ]) {
            body()
    }
}


def buildGenerateLicenseImage = { fromImage ->
    writeFile file: "${env.WORKSPACE}@tmp/GenerateLicenseImageDockerfile", text: """\
FROM ${fromImage}
RUN apt-get update -y && apt-get install python3 python3-pip python3-setuptools -y
RUN pip3 install wheel pyyaml
"""

    def imageName = "${fromImage}-license-${env.STAGE_NAME.replaceAll(~/[^a-z0-9]/,'')}${env.BUILD_ID}"
    docker.build(imageName, "${env.WORKSPACE}@tmp -f ${env.WORKSPACE}@tmp/GenerateLicenseImageDockerfile")
    return imageName
}

def buildModuleTestImage = { fromImage ->
    writeFile file: "${env.WORKSPACE}@tmp/ProcessingModuleImageDockerfile", text: """\
FROM ${fromImage}
RUN curl -sL https://deb.nodesource.com/setup_lts.x | bash - && \
    apt-get install -y nodejs
RUN chmod 4755 /bin/dmesg
"""

    def imageName = "${fromImage}-processing-${env.STAGE_NAME.replaceAll(~/[^a-z0-9]/,'')}${env.BUILD_ID}"
    docker.build(imageName, "${env.WORKSPACE}@tmp -f ${env.WORKSPACE}@tmp/ProcessingModuleImageDockerfile")
    return imageName
}


def buildDockerBinaryImage = { fromImage ->
    writeFile file: "${env.WORKSPACE}@tmp/DockerBinaryImageDockerfile", text: """\
FROM ${fromImage}
ARG DOCKER_VERSION=19.03.8
RUN set -ex \
    && curl -fsSLO https://download.docker.com/linux/static/stable/x86_64/docker-\${DOCKER_VERSION}.tgz \
    && mv docker-\${DOCKER_VERSION}.tgz docker.tgz \
    && tar xzvf docker.tgz \
    && mv docker/docker /usr/local/bin/docker \
    && rm -r docker docker.tgz
"""
    def imageName = "${fromImage}-dbin-${env.STAGE_NAME.replaceAll(~/[^a-z0-9]/,'')}${env.BUILD_ID}"
    docker.build(imageName, "${env.WORKSPACE}@tmp -f ${env.WORKSPACE}@tmp/DockerBinaryImageDockerfile")
    return imageName
}


def moduleTest = {
    sh script: """#!/bin/bash -ex

        mkdir -p /tmp/bin
        /bin/echo -e "#!/bin/sh\\ncase \"\\\$1\" in\\nUsername*) echo \"\\\$GIT_USERNAME\" ;;\\nPassword*) echo \"\\\$GIT_PASSWORD\" ;;\\nesac\\n" | tee -a /tmp/bin/askpass
        chmod u+x /tmp/bin/askpass
        export PATH=/tmp/bin:\$PATH

        unset _JAVA_OPTIONS

        MAVEN_OPTS='-Xmx800m' ${MVN} test -pl \${MAVEN_PROJECTS} \
        ${MAVEN_SKIP} -Dremoteresources.skip=true -Ddruid.generic.useDefaultValueForNull=\${DRUID_USE_DEFAULT_VALUE_FOR_NULL}

        sh -c "dmesg | egrep -i '(oom|out of memory|kill process|killed).*' -C 1 || exit 0"
        free -m
        ${MVN} -pl \${MAVEN_PROJECTS} jacoco:report

        export TARGET_BRANCH_NAME=\${CHANGE_TARGET:-${env.BRANCH_NAME}}
        git remote set-branches --add origin \${BRANCH_NAME:-master} && git fetch
        all_files="\$(git diff --name-only origin/\${TARGET_BRANCH_NAME}...HEAD | grep "\\.java\$" || [[ \$? == 1 ]])"

        for f in \${all_files}; do
            echo \$f
        done

        if [[ "\${MAVEN_PROJECTS}" = \\!* ]]; then
          regex="\${MAVEN_PROJECTS:1}";
          regex="^\${regex//,\\!/\\\\|^}";
          project_files="\$(echo "\${all_files}" | grep -v "\${regex}" || [[ \$? == 1 ]])";
        else
          regex="^\${MAVEN_PROJECTS//,/\\\\|^}";
          project_files="\$(echo "\${all_files}" | grep "\${regex}" || [[ \$? == 1 ]])";
        fi

        for f in \${project_files}; do
            echo \$f
        done

        if [ -n "\${project_files}" ]; then
            { for i in 1 2 3; do npm install @connectis/diff-test-coverage@1.5.3 && break || sleep 15; done } && \
            git diff origin/\${TARGET_BRANCH_NAME}...HEAD -- \${project_files} | \
            node_modules/.bin/diff-test-coverage \
              --coverage "**/target/site/jacoco/jacoco.xml" \
              --type jacoco \
              --line-coverage 50 \
              --branch-coverage 50 \
              --function-coverage 0 \
              --log-template "coverage-lines-complete" \
              --log-template "coverage-files-complete" \
              --log-template "totals-complete" \
              --log-template "errors" \
              -- || \
            { printf "\\n\\n****FAILED****\\nDiff code coverage check failed. To view coverage report, run 'mvn clean test jacoco:report' and open 'target/site/jacoco/index.html'\\nFor more details on how to run code coverage locally, follow instructions here - https://github.com/apache/druid/blob/master/dev/code-review/code-coverage.md#running-code-coverage-locally\\n\\n" && false; }
        fi
    """
}

def mavenCheck = { stageName, body ->
    stage(stageName) {
        lightweightNode {
            checkout scm
            mavenUnstash()
            withArtifactorySettings { settingsPath ->
                docker.image('maven:3.6.3-jdk-8').inside(
                    "--memory=8g --memory-reservation=4g -v ${settingsPath}:/tmp/.m2/settings.xml -e HOME=/tmp") {
                    body()
                }
            }
        }
    }
}

def testModule = { stageName, jdkVersion, envMap ->
    stage(stageName) {
        lightweightNode {
            withArtifactorySettings { settingsPath ->
                docker.image(buildModuleTestImage("maven:3.6.3-jdk-${jdkVersion}")).inside(
                    "--memory=8g --memory-reservation=4g --privileged -v ${settingsPath}:/tmp/.m2/settings.xml -e HOME=/tmp") {
                    checkout scm
                    mavenUnstash()
                    withGitCredentials {
                        withEnv(envMap) {
                            moduleTest()
                        }
                    }
                }
            }
        }
    }
}

def testIndexingModule = { stageName, jdkVersion, envMap ->
    stage(stageName) {
        lightweightNode {
            withArtifactorySettings { settingsPath ->
                docker.image(buildModuleTestImage("maven:3.6.3-jdk-${jdkVersion}")).inside(
                    "--memory=8g --memory-reservation=4g --privileged -v ${settingsPath}:/root/.m2/settings.xml -u root:root") {
                    checkout scm
                    mavenUnstash()
                    withGitCredentials {
                        withEnv(envMap) {
                            moduleTest()
                        }
                    }
                }
            }
        }
    }
}

def testModuleWithDocker = { stageName, jdkVersion, envMap ->
    stage(stageName) {
        heavyNode {
            dockerInitCleanup()
            withArtifactorySettings { settingsPath ->
                def moduleTestImage = buildModuleTestImage("maven:3.6.3-jdk-${jdkVersion}")
                def dockerBinaryImage = buildDockerBinaryImage(moduleTestImage)

                docker.image(dockerBinaryImage).inside("""\
                    --memory=8g \
                    --memory-reservation=4g \
                    --privileged \
                    -v ${settingsPath}:/root/.m2/settings.xml \
                    -v /var/run/docker.sock:/var/run/docker.sock \
                    --net host \
                    -u root:root \
                    """) {
                    checkout scm
                    mavenUnstash()
                    withGitCredentials {
                        withEnv(envMap) {
                            moduleTest()
                        }
                    }
                }
            }
        }
    }
}

def integrationTests = { stageName, jdkVersion, envMap ->
    stage(stageName) {
        heavyNode {
            dockerInitCleanup()
            sh script: "sudo rm -rf /tmp/shared && mkdir -p /tmp/shared"
            withArtifactorySettings { settingsPath ->
                docker.image(buildDockerBinaryImage("maven:3.6.3-jdk-${jdkVersion}")).inside("""\
                    -v ${settingsPath}:/tmp/.m2/settings.xml \
                    -v /var/run/docker.sock:/var/run/docker.sock \
                    -v /tmp/shared:/tmp/shared \
                    -e HOME=/tmp \
                    -e DOCKER_IP=127.0.0.1 \
                    --net host \
                    -u root:root \
                    """) {
                    checkout scm
                    try {
                        mavenUnstash()
                    } catch(err) {
                        echo "Exception: ${err}"
                        throw err
                    }
                    withEnv(envMap) {
                        sh script: """
                            echo "deb http://security.debian.org/debian-security jessie/updates main" >> /etc/apt/sources.list
                            apt-get update -y
                            apt-get install dnsutils -y
                            apt-get install openssl=1.0.1t-1+deb8u12 -y --allow-downgrades

                            mkdir -p /tmp/bin
                            /bin/echo -e "#!/bin/bash\\nexec /usr/bin/mvn -B -Dmaven.repo.local=${env.WORKSPACE}/.m2/repository \\\$@" | tee -a /tmp/bin/mvn
                            chmod u+x /tmp/bin/mvn
                        """
                        try {
                            sh script: """
                                export PATH=/tmp/bin:\$PATH
                                mvn verify -pl integration-tests -P integration-tests \${TESTNG_GROUPS} \${JVM_RUNTIME} ${MAVEN_SKIP}
                            """
                        } catch(err) {
                            sh script: """#!/bin/bash -ex
                                for v in ~/shared/logs/*.log; do
                                    echo \$v logtail ========================
                                    tail -100 \$v
                                done
                                for v in broker middlemanager overlord router coordinator historical; do
                                    echo \$v dmesg ========================
                                    docker exec druid-\$v sh -c 'dmesg | tail -3'
                                done
                            """
                            throw err
                        }
                    }
                }
            }
        }
    }
}


def packagingCheck = { jdkVersion ->
    stage("(openjdk${jdkVersion}) packaging check") {
        lightweightNode {
            withArtifactorySettings { settingsPath ->
                docker.image(buildGenerateLicenseImage("maven:3.6.3-jdk-${jdkVersion}")).inside(
                    "--memory=8g --memory-reservation=4g -v ${settingsPath}:/tmp/.m2/settings.xml -e HOME=/tmp") {
                    checkout scm
                    sh script: """
                        MAVEN_OPTS='-Xmx3000m' ${MVN} -e clean install -Prat -Pdist -Pbundle-contrib-exts --fail-at-end \
                        -pl '!benchmarks' ${MAVEN_SKIP} ${MAVEN_SKIP_TESTS} -Ddruid.console.skip=false -T1C
                    """
                }
            }
        }
    }
}


stage("Maven install") {
    lightweightNode {
        withArtifactorySettings { settingsPath ->
            docker.image('maven:3.6.3-jdk-8').inside(
                "--memory=8g --memory-reservation=4g -v ${settingsPath}:/tmp/.m2/settings.xml -e HOME=/tmp") {
                checkout scm
                sh script: "${MVN_OPTS} && ${MVN} clean install -q -ff ${MAVEN_SKIP} ${MAVEN_SKIP_TESTS} -T 1C", label: "Maven install"
                mavenStash()
            }
        }
    }
}

stage("Checks") {
    parallel "animal sniffer checks": {
        mavenCheck("animal sniffer checks") {
            sh script: "${MVN} animal-sniffer:check --fail-at-end", label: "animal sniffer"
        }
    },
    "checkstyle": {
        mavenCheck("checkstyle") {
            sh script: "${MVN} checkstyle:checkstyle --fail-at-end",label: "checkstyle"
        }
    },
    "enforcer checks": {
        mavenCheck("enforcer checks") {
            sh script: "${MVN} enforcer:enforce --fail-at-end", label: "enforcer checks"
        }
    },
    "forbidden api checks": {
        mavenCheck("forbidden api checks") {
            sh script: "${MVN} forbiddenapis:check forbiddenapis:testCheck --fail-at-end", label: "forbidden api checks"
        }
    },
    "pmd checks": {
        mavenCheck("pmd checks") {
            sh script: "${MVN} pmd:check --fail-at-end", label: "pmd checks"
        }
    },
    "spotbugs checks": {
        mavenCheck("spotbugs checks") {
            sh script: "${MVN} spotbugs:check --fail-at-end -pl '!benchmarks' -T 1C", label: "spotbugs checks"
        }
    },
    "license checks": {
        stage('license checks') {
            lightweightNode {
                withArtifactorySettings { settingsPath ->
                    docker.image(buildGenerateLicenseImage("maven:3.6.3-jdk-8")).inside(
                        "--memory=8g --memory-reservation=4g -v ${settingsPath}:/tmp/.m2/settings.xml -e HOME=/tmp") {
                        checkout scm
                        mavenUnstash()
                        sh script: """
                            ${MVN_OPTS}
                            mkdir -p /tmp/bin
                            /bin/echo -e "#!/bin/bash\\nexec /usr/bin/mvn -B -Dmaven.repo.local=${env.WORKSPACE}/.m2/repository \\\$@" | tee -a /tmp/bin/mvn
                            chmod u+x /tmp/bin/mvn
                            export PATH=/tmp/bin:\$PATH

                            mvn apache-rat:check -Prat --fail-at-end \
                                -Dorg.slf4j.simpleLogger.log.org.apache.maven.cli.transfer.Slf4jMavenTransferListener=warn \
                                -Drat.consoleOutput=true -Drat.numUnapprovedLicenses=100
                            mkdir -p target
                            distribution/bin/generate-license-dependency-reports.py . target --clean-maven-artifact-transfer --parallel 2
                            distribution/bin/check-licenses.py licenses.yaml target/license-reports
                        """, label: "license checks"
                    }
                }
            }
        }
    },
    "(openjdk8) strict compilation": {
        stage("(openjdk8) strict compilation") {
            lightweightNode {
                withArtifactorySettings { settingsPath ->
                    docker.image('maven:3.6.3-jdk-8').inside(
                        "--memory=8g --memory-reservation=4g -v ${settingsPath}:/tmp/.m2/settings.xml -e HOME=/tmp") {
                        checkout scm
                        sh script: "MAVEN_OPTS='-Xmx3000m' ${MVN} clean -Pstrict compile test-compile --fail-at-end \
                            -pl '!benchmarks' ${MAVEN_SKIP} ${MAVEN_SKIP_TESTS}"
                    }
                }
            }
        }
    },
    "analyze dependencies": {
        stage("analyze dependencies") {
            lightweightNode {
                withArtifactorySettings { settingsPath ->
                    docker.image('maven:3.6.3-jdk-8').inside(
                        "--memory=8g --memory-reservation=4g -v ${settingsPath}:/tmp/.m2/settings.xml -e HOME=/tmp") {
                        checkout scm
                        mavenUnstash()
                        sh script: """
                            MAVEN_OPTS='-Xmx3000m' ${MVN} ${MAVEN_SKIP} dependency:analyze -DoutputXML=true -DignoreNonCompile=true -DfailOnWarning=true || { echo "
                            The dependency analysis has found a dependency that is either:
                            1) Used and undeclared: These are available as a transitive dependency but should be explicitly
                            added to the POM to ensure the dependency version. The XML to add the dependencies to the POM is
                            shown above.
                            2) Unused and declared: These are not needed and removing them from the POM will speed up the build
                            and reduce the artifact size. The dependencies to remove are shown above.
                            If there are false positive dependency analysis warnings, they can be suppressed:
                            https://maven.apache.org/plugins/maven-dependency-plugin/analyze-mojo.html#usedDependencies
                            https://maven.apache.org/plugins/maven-dependency-plugin/examples/exclude-dependencies-from-dependency-analysis.html
                            For more information, refer to:
                            https://maven.apache.org/plugins/maven-dependency-plugin/analyze-mojo.html
                            " && false; }
                        """
                    }
                }
            }
        }
    },
    "intellij inspections": {
        stage("intellij inspections") {
            lightweightNode {
                checkout scm
                mavenUnstash()
                sh script: """
                    docker run --rm \
                    -v ${env.WORKSPACE}:/project \
                    -v ${env.WORKSPACE}/.m2:/home/inspect/.m2 \
                    ccaominh/intellij-inspect:1.0.0 \
                    /project/pom.xml \
                    /project/.idea/inspectionProfiles/Druid.xml \
                    --levels ERROR \
                    --scope JavaInspectionsScope
                """
            }
        }
    },
    "(openjdk8) packaging check": {
        packagingCheck(8)
    },
    "(openjdk11) packaging check": {
        packagingCheck(11)
    },
    "(openjdk8) processing module test": {
        testModule("(openjdk8) processing module test", 8, ["MAVEN_PROJECTS=processing", "DRUID_USE_DEFAULT_VALUE_FOR_NULL=true"])
    },
    "(openjdk11) processing module test": {
        testModule("(openjdk8) processing module test", 11, ["MAVEN_PROJECTS=processing", "DRUID_USE_DEFAULT_VALUE_FOR_NULL=true"])
    },
    "(openjdk8) processing module test (SQL Compatibility)": {
        testModule("(openjdk8) processing module test (SQL Compatibility)", 8, ["MAVEN_PROJECTS=processing", "DRUID_USE_DEFAULT_VALUE_FOR_NULL=false"])
    },
    "(openjdk11) processing module test (SQL Compatibility)": {
        testModule("(openjdk8) processing module test (SQL Compatibility)", 11, ["MAVEN_PROJECTS=processing", "DRUID_USE_DEFAULT_VALUE_FOR_NULL=false"])
    },
    "(openjdk8) indexing modules test": {
        testIndexingModule("(openjdk8) indexing modules test", 8, ["MAVEN_PROJECTS=indexing-hadoop,indexing-service,extensions-core/kafka-indexing-service,extensions-core/kinesis-indexing-service", "DRUID_USE_DEFAULT_VALUE_FOR_NULL=true"])
    },
    "(openjdk11) indexing modules test": {
        testIndexingModule("(openjdk11) indexing modules test", 11, ["MAVEN_PROJECTS=indexing-hadoop,indexing-service,extensions-core/kafka-indexing-service,extensions-core/kinesis-indexing-service", "DRUID_USE_DEFAULT_VALUE_FOR_NULL=true"])
    },
    "(openjdk8) indexing modules test (SQL Compatibility)": {
        testIndexingModule("(openjdk8) indexing modules test (SQL Compatibility)", 8, ["MAVEN_PROJECTS=indexing-hadoop,indexing-service,extensions-core/kafka-indexing-service,extensions-core/kinesis-indexing-service", "DRUID_USE_DEFAULT_VALUE_FOR_NULL=false"])
    },
    "(openjdk11) indexing modules test (SQL Compatibility)": {
        testIndexingModule("(openjdk11) indexing modules test (SQL Compatibility)", 11, ["MAVEN_PROJECTS=indexing-hadoop,indexing-service,extensions-core/kafka-indexing-service,extensions-core/kinesis-indexing-service", "DRUID_USE_DEFAULT_VALUE_FOR_NULL=false"])
    },
    "(openjdk8) server modules test": {
        testModule("(openjdk8) server modules test", 8, ["MAVEN_PROJECTS=server", "DRUID_USE_DEFAULT_VALUE_FOR_NULL=true"])
    },
    "(openjdk11) server modules test": {
        testModule("(openjdk11) server modules test", 11, ["MAVEN_PROJECTS=server", "DRUID_USE_DEFAULT_VALUE_FOR_NULL=true"])
    },
    "(openjdk8) server modules test (SQL Compatibility)": {
        testModule("(openjdk8) server modules test (SQL Compatibility)", 8, ["MAVEN_PROJECTS=server", "DRUID_USE_DEFAULT_VALUE_FOR_NULL=false"])
    },
    "(openjdk11) server modules test (SQL Compatibility)": {
        testModule("(openjdk11) server modules test (SQL Compatibility)", 11, ["MAVEN_PROJECTS=server", "DRUID_USE_DEFAULT_VALUE_FOR_NULL=false"])
    },
    "(openjdk8) other modules test": {
        testModuleWithDocker("(openjdk8) other modules test", 8, ["MAVEN_PROJECTS=!processing,!indexing-hadoop,!indexing-service,!extensions-core/kafka-indexing-service,!extensions-core/kinesis-indexing-service,!server,!web-console", "DRUID_USE_DEFAULT_VALUE_FOR_NULL=true"])
    },
    "(openjdk11) other modules test": {
        testModuleWithDocker("(openjdk11) other modules test", 11, ["MAVEN_PROJECTS=!processing,!indexing-hadoop,!indexing-service,!extensions-core/kafka-indexing-service,!extensions-core/kinesis-indexing-service,!server,!web-console", "DRUID_USE_DEFAULT_VALUE_FOR_NULL=true"])
    },
    "(openjdk8) other modules test (SQL Compatibility)": {
        testModuleWithDocker("(openjdk8) other modules test (SQL Compatibility)", 8, ["MAVEN_PROJECTS=!processing,!indexing-hadoop,!indexing-service,!extensions-core/kafka-indexing-service,!extensions-core/kinesis-indexing-service,!server,!web-console", "DRUID_USE_DEFAULT_VALUE_FOR_NULL=false"])
    },
    "(openjdk11) other modules test (SQL Compatibility)": {
        testModuleWithDocker("(openjdk11) other modules test (SQL Compatibility)", 11, ["MAVEN_PROJECTS=!processing,!indexing-hadoop,!indexing-service,!extensions-core/kafka-indexing-service,!extensions-core/kinesis-indexing-service,!server,!web-console", "DRUID_USE_DEFAULT_VALUE_FOR_NULL=false"])
    },
    "web console": {
        stage("web console") {
            lightweightNode {
                withArtifactorySettings { settingsPath ->
                    docker.image(buildModuleTestImage("maven:3.6.3-jdk-8")).inside(
                        "--memory=8g --memory-reservation=4g -v ${settingsPath}:/tmp/.m2/settings.xml -e HOME=/tmp") {
                        checkout scm
                        sh script: "${MVN} test -pl 'web-console'"
                        sh script: """
                            cd web-console
                            for i in 1 2 3; do npm run codecov && break || sleep 15; done
                        """
                    }
                }
            }
        }
    },
    "web console end-to-end test": {
        stage("web console end-to-end test") {
            lightweightNode {
                def moduleTestImage = buildModuleTestImage("maven:3.6.3-jdk-8")
                def generateLicenseImage = buildGenerateLicenseImage(moduleTestImage)

                docker.image(generateLicenseImage).inside("--memory=8g --memory-reservation=4g -e HOME=/tmp") {
                    checkout scm
                    sh script: """
                        web-console/script/druid build
                        web-console/script/druid start &
                        sleep 10
                    """
                    try {
                        sh script: "cd web-console && npm run test-e2e"
                    } finally {
                        sh script: "web-console/script/druid stop"
                    }
                }
            }
        }
    },
    "docs": {
        stage("docs") {
            lightweightNode {
                docker.image('node:10.21.0-jessie-slim').inside("--memory=8g --memory-reservation=4g -e HOME=/tmp") {
                    checkout scm
                    sh script: """
                        cd website
                        npm install
                        (npm run lint && npm run spellcheck) || { echo "
                        If there are spell check errors:
                        1) Suppressing False Positives: Edit website/.spelling to add suppressions. Instructions
                        are at the top of the file and explain how to suppress false positives either globally or
                        within a particular file.
                        2) Running Spell Check Locally: cd website && npm install && npm run spellcheck
                        For more information, refer to: https://www.npmjs.com/package/markdown-spellcheck
                        " && false; }
                    """
                }
            }
        }
    },
    "security vulnerabilities": {
        stage("security vulnerabilities") {
            lightweightNode {
                withArtifactorySettings { settingsPath ->
                    docker.image(buildModuleTestImage("maven:3.6.3-jdk-8")).inside(
                        "--memory=8g --memory-reservation=4g -v ${settingsPath}:/tmp/.m2/settings.xml -e HOME=/tmp") {
                        checkout scm
                        sh script: """
                            ${MVN} dependency-check:check || { echo "
                            The OWASP dependency check has found security vulnerabilities. Please use a newer version
                            of the dependency that does not have vulnerabilities. If the analysis has false positives,
                            they can be suppressed by adding entries to owasp-dependency-check-suppressions.xml (for more
                            information, see https://jeremylong.github.io/DependencyCheck/general/suppression.html).
                            " && false; }
                        """
                    }
                }
            }
        }
    },
    "(Compile=openjdk8, Run=openjdk8) batch index integration test": {
        integrationTests("(Compile=openjdk8, Run=openjdk8) batch index integration test", 8, ['TESTNG_GROUPS=-Dgroups=batch-index','JVM_RUNTIME=-Djvm.runtime=8'])
    },
    "(Compile=openjdk8, Run=openjdk8) input format integration test": {
        integrationTests("(Compile=openjdk8, Run=openjdk8) input format integration test", 8, ['TESTNG_GROUPS=-Dgroups=input-format','JVM_RUNTIME=-Djvm.runtime=8'])
    },
    "(Compile=openjdk8, Run=openjdk8) perfect rollup parallel batch index integration test": {
        integrationTests("(Compile=openjdk8, Run=openjdk8) perfect rollup parallel batch index integration test", 8, ['TESTNG_GROUPS=-Dgroups=perfect-rollup-parallel-batch-index','JVM_RUNTIME=-Djvm.runtime=8'])
    },
    "(Compile=openjdk8, Run=openjdk8) kafka index integration test": {
        integrationTests("(Compile=openjdk8, Run=openjdk8) kafka index integration test", 8, ['TESTNG_GROUPS=-Dgroups=kafka-index','JVM_RUNTIME=-Djvm.runtime=8'])
    },
    "(Compile=openjdk8, Run=openjdk8) kafka index integration test slow": {
        integrationTests("(Compile=openjdk8, Run=openjdk8) kafka index integration test slow", 8, ['TESTNG_GROUPS=-Dgroups=kafka-index-slow','JVM_RUNTIME=-Djvm.runtime=8'])
    },
    "(Compile=openjdk8, Run=openjdk8) transactional kafka index integration test": {
        integrationTests("(Compile=openjdk8, Run=openjdk8) transactional kafka index integration test", 8, ['TESTNG_GROUPS=-Dgroups=kafka-transactional-index','JVM_RUNTIME=-Djvm.runtime=8'])
    },
    "(Compile=openjdk8, Run=openjdk8) transactional kafka index integration test slow": {
        integrationTests("(Compile=openjdk8, Run=openjdk8) transactional kafka index integration test slow", 8, ['TESTNG_GROUPS=-Dgroups=kafka-transactional-index-slow','JVM_RUNTIME=-Djvm.runtime=8'])
    },
    "(Compile=openjdk8, Run=openjdk8) Kafka index integration test with various formats": {
        integrationTests("(Compile=openjdk8, Run=openjdk8) Kafka index integration test with various formats", 8, ['TESTNG_GROUPS=-Dgroups=kafka-data-format','JVM_RUNTIME=-Djvm.runtime=8'])
    },
    "(Compile=openjdk8, Run=openjdk8) query integration test": {
        integrationTests("(Compile=openjdk8, Run=openjdk8) query integration test", 8, ['TESTNG_GROUPS=-Dgroups=query','JVM_RUNTIME=-Djvm.runtime=8'])
    },
    "(Compile=openjdk8, Run=openjdk8) security integration test": {
        integrationTests("(Compile=openjdk8, Run=openjdk8) security integration test", 8, ['TESTNG_GROUPS=-Dgroups=security','JVM_RUNTIME=-Djvm.runtime=8'])
    },
    "(Compile=openjdk8, Run=openjdk8) realtime index integration test": {
        integrationTests("(Compile=openjdk8, Run=openjdk8) realtime index integration test", 8, ['TESTNG_GROUPS=-Dgroups=realtime-index','JVM_RUNTIME=-Djvm.runtime=8'])
    },
    "(Compile=openjdk8, Run=openjdk8) other integration test": {
        integrationTests("(Compile=openjdk8, Run=openjdk8) other integration test", 8, ['TESTNG_GROUPS=-DexcludedGroups=batch-index,input-format,perfect-rollup-parallel-batch-index,kafka-index,query,realtime-index,security,s3-deep-storage,gcs-deep-storage,azure-deep-storage,hdfs-deep-storage,s3-ingestion,kinesis-index,kinesis-data-format,kafka-transactional-index,kafka-index-slow,kafka-transactional-index-slow,kafka-data-format,hadoop-s3-to-s3-deep-storage,hadoop-s3-to-hdfs-deep-storage,hadoop-azure-to-azure-deep-storage,hadoop-azure-to-hdfs-deep-storage,hadoop-gcs-to-gcs-deep-storage,hadoop-gcs-to-hdfs-deep-storage,aliyun-oss-deep-storage','JVM_RUNTIME=-Djvm.runtime=8'])
    },

    "(Compile=openjdk8, Run=openjdk11) batch index integration test": {
        integrationTests("(Compile=openjdk8, Run=openjdk11) batch index integration test", 8, ['TESTNG_GROUPS=-Dgroups=batch-index','JVM_RUNTIME=-Djvm.runtime=11'])
    },
    "(Compile=openjdk8, Run=openjdk11) input format integration test": {
        integrationTests("(Compile=openjdk8, Run=openjdk11) input format integration test", 8, ['TESTNG_GROUPS=-Dgroups=input-format','JVM_RUNTIME=-Djvm.runtime=11'])
    },
    "(Compile=openjdk8, Run=openjdk11) perfect rollup parallel batch index integration test": {
        integrationTests("(Compile=openjdk8, Run=openjdk11) perfect rollup parallel batch index integration test", 8, ['TESTNG_GROUPS=-Dgroups=perfect-rollup-parallel-batch-index','JVM_RUNTIME=-Djvm.runtime=11'])
    },
    "(Compile=openjdk8, Run=openjdk11) query integration test": {
        integrationTests("(Compile=openjdk8, Run=openjdk11) query integration test", 8, ['TESTNG_GROUPS=-Dgroups=query','JVM_RUNTIME=-Djvm.runtime=11'])
    },
    "(Compile=openjdk8, Run=openjdk11) security integration test": {
        integrationTests("(Compile=openjdk8, Run=openjdk11) security integration test", 8, ['TESTNG_GROUPS=-Dgroups=security','JVM_RUNTIME=-Djvm.runtime=11'])
    },
    "(Compile=openjdk8, Run=openjdk11) realtime index integration test": {
        integrationTests("(Compile=openjdk8, Run=openjdk11) realtime index integration test", 8, ['TESTNG_GROUPS=-Dgroups=realtime-index','JVM_RUNTIME=-Djvm.runtime=11'])
    },
    "(Compile=openjdk8, Run=openjdk11 other integration test": {
        integrationTests("(Compile=openjdk8, Run=openjdk11) other integration test", 8, ['TESTNG_GROUPS=-DexcludedGroups=batch-index,input-format,perfect-rollup-parallel-batch-index,kafka-index,query,realtime-index,security,s3-deep-storage,gcs-deep-storage,azure-deep-storage,hdfs-deep-storage,s3-ingestion,kinesis-index,kinesis-data-format,kafka-transactional-index,kafka-index-slow,kafka-transactional-index-slow,kafka-data-format,hadoop-s3-to-s3-deep-storage,hadoop-s3-to-hdfs-deep-storage,hadoop-azure-to-azure-deep-storage,hadoop-azure-to-hdfs-deep-storage,hadoop-gcs-to-gcs-deep-storage,hadoop-gcs-to-hdfs-deep-storage,aliyun-oss-deep-storage','JVM_RUNTIME=-Djvm.runtime=11'])
    }
}
